Messaging Patterns
with Go
19 Dec 2016

Loh Siu Yin
Technology Consultant, Beyond Broadcast LLP
siuyin@beyondbroadcast.com

* Messaging Patterns
- Publish / Subscribe
- Push / Pull (queueing)
- Request / Reply

Let's implement them with Go Concurrency.

* When to use Messaging within Go
- Why not an external library like ZeroMQ or nanomsg/go-mangos ?
- Why not use an broker like NATS or RabbitMQ?

Advantages:

- Avoid external dependency on a messaging library or broker
- Enhanced cohesion / better tracking -- all relevant components together
- Simplified deployment -- one single static binary


Disadvantage:

- Can't upgrade individual application components in deployed environment as the build is a monolith. However A/B testing is still available. Deploy new (B service), disable old (A service), enable new (B service).

* Simple Publisher
pub1/main.go:
.code pub1/main.go /010/,/020/

This publisher *pub* sends the current time down the time channel
once a second, forever.

* Simple Subscriber
.code pub1/main.go /050/,/060/
Subscriber *sub* supplies an input time channel.

*sub* pulls time objects out of its input channel and displays it.

* Main program
.code pub1/main.go /070/,/080/
.play pub1/main.go /030/,/040/

* Adding multiple subscribers
pub2/main.go:
.play pub2/main.go /030/,/040/

Can we have multiple publishers?

* Multiple Publishers
Publisher is now given a time zone name.
mpub1/main.go:
.code mpub1/main.go /010/,/020/

* Connecting the multiple publishers
.play mpub1/main.go /030/,/040/

* Fast Publisher / producer
mpubSlow/main.go:
.code  mpubSlow/main.go /010/,/020/
*pub* now updates every 100 Milliseconds.

* Slow subscriber / consumer
.play -edit mpubSlow/main.go /050/,/060/
Why are'nt we getting all the messages published every 100 Millisecond?

.play -edit mpubSlow/main.go /030/,/032/
We can buffer the producer and/or the consumer. However this only works for absorbing producer bursts, not indefinitely.

* Work Queue with two workers
q1/main.go:
.code q1/main.go /030/,/032/
.code q1/main.go /010/,/020/
*push* pushes *job* s into the work queue.

* Worker
.play -edit q1/main.go /050/,/060/
.play -edit q1/main.go /030/,/040/
Average worker speed must be higher than 1 job / second.

* Workers on demand
.play -edit q1/main.go /030/,/046/


* Request / Response -- for stateless services
reqrsp2/main.go:
Each job has a Requestor (reply to) field.
.code reqrsp2/main.go /050/,/060/

Launch workers listening on the job queue.
.code reqrsp2/main.go /010/,/012/

* dbl worker replies on the reply channel
.code reqrsp2/main.go /030/,/040/

* Make the requests
.code reqrsp2/main.go /070/,/080/
.play -edit reqrsp2/main.go /013/,/014/

The *done* channel is to signal main program to end.

* Sample Application
- Accept user input string
- Broadcast the string to 3 modules to process in parallel
- Consolidate the output and display

* User Input Module
lucase/main.go:
.code lucase/main.go /050/,/060/
.code lucase/main.go /030/,/040/

* Lower Casing Module
.code lucase/main.go /010/,/020/

* Consolidator
.code lucase/main.go /090/,/100/

* Message Routing
.code lucase/main.go /070/,/080/

Demo:

 cd /home/siuyin/go/src/siuyin/present_go_messaging_patterns/lucase
 go run main.go
