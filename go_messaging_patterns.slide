Messaging Patterns
with Go
19 Dec 2016

Loh Siu Yin
Technology Consultant, Beyond Broadcast LLP
siuyin@beyondbroadcast.com

* Messaging Patterns
- Publish / Subscribe
- Push / Pull (queueing)
- Request / Reply

Let's implement them with Go Concurrency.

* Simple Publisher
pub1/main.go:
.code pub1/main.go /010/,/020/

This publisher sends the current time down the channel
once a second forever.

* Simple Subscriber
.code pub1/main.go /050/,/060/
This subscriber accepts a string from a channel and prints it out.

* Main program
.play pub1/main.go /030/,/040/
Here we have a single subscriber.

How do we add a second subscriber?

* Two Subscribers
pub2/main.go:
.play pub2/main.go /030/,/040/

Can we have multiple publishers?

* Multiple Publishers
Publisher is now given a name.
mpub1/main.go:
.code mpub1/main.go /010/,/020/

* Connecting Publishers to Subscribers
.play mpub1/main.go /030/,/040/

This code works, but it looks rather clumsy.

* Fast Publisher / producer
mpubSlow/main.go:
.play -edit mpubSlow/main.go /010/,/020/
Don't run this now, instead run the next slide first.

* Slow subscriber / consumer
.play -edit mpubSlow/main.go /050/,/060/
Why are'nt we getting all the messages published every 100 Millisecond?

We can buffer the producer and/or the consumer. However this only works for absorbing producer bursts, not indefinitely.

* fanIn accepts multiple publishers
mpub2/main.go:
.code mpub2/main.go /070/,/080/

* fanOut copies input to multiple channels
.code mpub2/main.go /090/,/100/
.code mpub2/main.go /050/,/060/

* Using fanIn and fanOut
.play mpub2/main.go /030/,/040/


* Work Queue with two workers
q1/main.go:
.code q1/main.go /010/,/020/
*push* pushes work into the work queue.

* Worker
.play -edit q1/main.go /050/,/060/
.play -edit q1/main.go /030/,/040/

* Request / Response
reqrsp/main.go:
.play -edit reqrsp/main.go /010/,/020/

* Request / Response 2: Stateless Workers
reqrsp2/main.go:
